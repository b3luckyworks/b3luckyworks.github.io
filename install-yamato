#!/usr/bin/env bash
# Yamato Prompt-Installer (EFI + Btrfs + systemd-boot + First-Boot-Hook)
# Getestet für Aufruf per: bash <(curl -fsSL https://b3luckyworks.github.io/install-yamato)
set -euo pipefail

# ---- Helpers ---------------------------------------------------------------
need_root() { [[ $EUID -eq 0 ]] || { echo "Bitte als root ausführen."; exit 1; }; }
is_archiso() { [[ -d /run/archiso ]] || grep -q '^VARIANT_ID=archiso' /etc/os-release 2>/dev/null; }
have() { command -v "$1" >/dev/null 2>&1; }

# Sicheres Lesen (auch wenn via Pipe gestartet): lese von /dev/tty
read_tty() {
  local prompt="$1" default="${2-}" ans
  if [[ -r /dev/tty ]]; then
    printf "%s %s" "$prompt" "${default:+[$default]}: " > /dev/tty
    IFS= read -r ans < /dev/tty || true
  else
    read -r -p "$prompt ${default:+[$default]}: " ans || true
  fi
  echo "${ans:-$default}"
}
read_secret_tty() {
  local prompt="$1" pw
  if [[ -r /dev/tty ]]; then
    printf "%s: " "$prompt" > /dev/tty
    stty -echo < /dev/tty
    IFS= read -r pw < /dev/tty || true
    stty echo < /dev/tty
    printf "\n" > /dev/tty
  else
    read -rs -p "$prompt: " pw; echo
  fi
  echo "$pw"
}

abort() { echo "Abbruch."; exit 1; }

# ---- Preconditions ---------------------------------------------------------
need_root
# Stelle sicher, dass Prompts eine echte TTY bekommen
[[ ! -t 0 && -r /dev/tty ]] && exec </dev/tty

if ! is_archiso; then
  echo "[INFO] Kein Arch-Live-System → starte Yamato Konfiguration (Phase 2)…"
  URL="https://raw.githubusercontent.com/b3luckyworks/yamato/HEAD/scripts/install.sh"
  TMP="/tmp/yamato-install.sh"
  curl -fsSL "$URL" -o "$TMP"
  chmod +x "$TMP"
  exec bash "$TMP" "${1:-client}"
fi

timedatectl set-ntp true || true

# Nur kleine Tools ggf. nachinstallieren (keine Upgrades im Live-ISO!)
need_pkgs=()
for p in curl git btrfs-progs dosfstools gptfdisk; do
  pacman -Qq "$p" >/dev/null 2>&1 || need_pkgs+=("$p")
done
((${#need_pkgs[@]})) && pacman -Sy --noconfirm --needed "${need_pkgs[@]}"

# ---- Prompts ---------------------------------------------------------------
echo "=== Yamato Arch-Installer (prompt-basiert) ==="
echo "Verfügbare Disks:"
lsblk -dpno NAME,SIZE,MODEL | grep -E '/dev/(nvme|sd|vd|mmcblk)'

DISK="$(read_tty "Zieldisk eingeben (z.B. /dev/nvme0n1)")"
[[ -b "$DISK" ]] || { echo "Ungültige Disk: $DISK"; abort; }
echo "WARNUNG: $DISK wird KOMPLETT GELÖSCHT!"
[[ "$(read_tty "Wirklich fortfahren? (YES/no)" "no")" == "YES" ]] || abort

HOSTNAME="$(read_tty "Hostname" "yamato")"
USERNAME="$(read_tty "Neuer Benutzername" "bjorn")"

while :; do
  PASS1="$(read_secret_tty "Passwort für $USERNAME")"
  PASS2="$(read_secret_tty "Passwort wiederholen")"
  [[ "$PASS1" == "$PASS2" ]] && break || echo "Passwörter verschieden, bitte erneut."
done
ROOTPW="$(read_secret_tty "Root-Passwort")"

TZONE="$(read_tty "Zeitzone" "Europe/Berlin")"
LOCALES="$(read_tty "Locales (Komma, in /etc/locale.gen aktivieren)" "de_DE.UTF-8,en_US.UTF-8")"
KEYMAP="$(read_tty "Konsole Keymap (vconsole.conf)" "de-latin1")"
SWAPSIZE="$(read_tty "Swapfile-Größe (0G = kein Swap)" "2G")"

# ---- Partitionierung (GPT: EFI + Root) -------------------------------------
echo "[PART] Partitioniere $DISK (EFI + Btrfs)…"
umount -R /mnt 2>/dev/null || true
swapoff -a 2>/dev/null || true
sgdisk --zap-all "$DISK" || true
partprobe "$DISK" || true

PSEP=""; [[ "$DISK" =~ (nvme|mmcblk) ]] && PSEP="p"
sgdisk -n1:0:+550M -t1:EF00 -c1:"EFI System" "$DISK"
sgdisk -n2:0:0     -t2:8300 -c2:"Linux root"  "$DISK"
partprobe "$DISK"

EFI="${DISK}${PSEP}1"
ROOT="${DISK}${PSEP}2"

echo "[FS] Dateisysteme erstellen…"
mkfs.fat -F32 "$EFI"
mkfs.btrfs -f "$ROOT"

echo "[SUBVOLS] Erzeuge Btrfs-Subvolumes…"
mount "$ROOT" /mnt
btrfs subvolume create /mnt/@
btrfs subvolume create /mnt/@home
btrfs subvolume create /mnt/@log
btrfs subvolume create /mnt/@pkg
umount /mnt

echo "[MOUNT] Subvolumes einhängen…"
mount -o subvol=@,noatime,compress=zstd,space_cache=v2 "$ROOT" /mnt
mkdir -p /mnt/{home,var/log,var/cache/pacman/pkg,boot}
mount -o subvol=@home,noatime,compress=zstd,space_cache=v2 "$ROOT" /mnt/home
mount -o subvol=@log,noatime,compress=zstd,space_cache=v2  "$ROOT" /mnt/var/log
mount -o subvol=@pkg,noatime,compress=zstd,space_cache=v2  "$ROOT" /mnt/var/cache/pacman/pkg
mount "$EFI" /mnt/boot

# ---- Basisinstallation ------------------------------------------------------
echo "[PACSTRAP] Installiere Basissystem nach /mnt…"
UCODE="intel-ucode"; grep -qi amd /proc/cpuinfo && UCODE="amd-ucode"
pacstrap -K /mnt base base-devel linux linux-firmware "$UCODE" networkmanager sudo btrfs-progs git stow

genfstab -U /mnt >> /mnt/etc/fstab

# Werte vorbereiten, die wir im chroot brauchen
ROOT_UUID="$(blkid -s PARTUUID -o value "$ROOT")"

# ---- Systemkonfiguration im chroot -----------------------------------------
echo "[CHROOT] System konfigurieren…"
arch-chroot /mnt /bin/bash -euo pipefail <<CHROOT
set -euo pipefail

echo "$HOSTNAME" > /etc/hostname
cat >/etc/hosts <<EOF
127.0.0.1   localhost
::1         localhost
127.0.1.1   $HOSTNAME.localdomain $HOSTNAME
EOF

# Locale
# Standardmäßig de_DE und en_US aktivieren, plus alle, die du angegeben hast
sed -i 's/^#\(de_DE.UTF-8\|en_US.UTF-8\)/\1/' /etc/locale.gen
IFS=, read -ra LCS <<<"$LOCALES"
for l in "\${LCS[@]}"; do sed -i "s|^#\($l\)|\1|" /etc/locale.gen || true; done
locale-gen
echo "LANG=en_US.UTF-8" > /etc/locale.conf

# Zeit & Konsole
ln -sf /usr/share/zoneinfo/$TZONE /etc/localtime
hwclock --systohc
printf "KEYMAP=$KEYMAP\nFONT=lat9w-16\n" > /etc/vconsole.conf

# Root & User
echo "root:$ROOTPW" | chpasswd
useradd -m -G wheel -s /bin/bash "$USERNAME"
echo "$USERNAME:$PASS1" | chpasswd
sed -i 's/^# %wheel ALL=(ALL:ALL) ALL/%wheel ALL=(ALL:ALL) ALL/' /etc/sudoers

# Bootloader (systemd-boot)
bootctl install
cat >/boot/loader/loader.conf <<EOF
default  arch
timeout  3
console-mode max
editor   no
EOF

KERNEL_PARAMS="root=$ROOT_UUID rw rootflags=subvol=@ quiet splash nowatchdog"
cat >/boot/loader/entries/arch.conf <<EOF
title   Arch Linux
linux   /vmlinuz-linux
initrd  /$UCODE.img
initrd  /initramfs-linux.img
options \$KERNEL_PARAMS
EOF

# Swapfile (optional, btrfs-konform)
if [[ "$SWAPSIZE" != "0G" && "$SWAPSIZE" != "0" ]]; then
  mkdir -p /swap
  chattr +C /swap || true
  fallocate -l "$SWAPSIZE" /swap/swapfile
  chmod 600 /swap/swapfile
  mkswap /swap/swapfile
  echo "/swap/swapfile none swap defaults 0 0" >> /etc/fstab
fi

systemctl enable NetworkManager

# First-Boot: Yamato
install -Dm0755 /usr/local/bin/yamato-firstboot.sh /usr/local/bin/yamato-firstboot.sh <<'EOFHOOK'
#!/usr/bin/env bash
set -euo pipefail
USER_NAME="$(awk -F: '$3>=1000 && $1!="nobody"{print $1}' /etc/passwd | head -n1)"
USER_HOME="$(getent passwd "$USER_NAME" | cut -d: -f6)"
REPO="https://github.com/b3luckyworks/yamato.git"
sudo -u "$USER_NAME" mkdir -p "\$USER_HOME/git"
if [[ ! -d "\$USER_HOME/git/yamato/.git" ]]; then
  sudo -u "$USER_NAME" git clone "\$REPO" "\$USER_HOME/git/yamato"
fi
sudo -u "$USER_NAME" bash -lc '"$HOME/git/yamato/scripts/install.sh" client || true'
systemctl disable yamato-firstboot.service || true
EOFHOOK

install -Dm0644 /etc/systemd/system/yamato-firstboot.service /etc/systemd/system/yamato-firstboot.service <<'EOFSVC'
[Unit]
Description=Yamato First Boot Hook
After=network-online.target
Wants=network-online.target

[Service]
Type=oneshot
ExecStart=/usr/local/bin/yamato-firstboot.sh

[Install]
WantedBy=multi-user.target
EOFSVC

systemctl enable yamato-firstboot.service
CHROOT

echo
echo "==> Fertig. Jetzt 'reboot' ins neue System."
echo "    Beim ersten Boot läuft der Yamato-Firstboot automatisch."
